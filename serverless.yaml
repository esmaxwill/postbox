service: postbox
variablesResolutionMode: "20210326"

custom:
  customDomain:
    domainName: ${self:custom.domain_name}
    basePath: ""
    stage: ${opt:stage, "test"}
    createRoute53Record: true
    certificateArn: ${self:custom.certificate_arn}
    autoDomain: true
    autoDomainWaitFor: 300

  pythonRequirements:
    dockerizePip: non-linux

  stage: ${opt:stage, self:provider.stage}

  domain_name: ${env:DOMAIN_NAME, 'postbox.smaxwill.com'}
  certificate_arn: ${env:CERTIFICATE_ARN, 'postbox.smaxwill.com'}

provider:
  name: aws
  runtime: python3.9
  region: us-east-1
  timeout: 30
  stage: test
  endpointType: REGIONAL
  lambdaHashingVersion: "20201221"
  httpApi:
    disableDefaultEndpoint: true
  # tracing:
  #   lambda: true

  memorySize: 1536

  environment:
    PYTHON_PATH: "/var/run/task"
    # SENTRY_DSN: ${env:SENTRY_DSN}
    # SENTRY_RELEASE: ${env:SENTRY_RELEASE}
    ENVIRONMENT: ${opt:stage, "test"}
    DYNAMODB_TABLE_NAME: !Ref StdbTable
    S3_BUCKET_NAME: !Ref DataBucket
    AUTHORIZATION_ISSUERS: ${env:AUTHORIZATION_ISSUERS, ""}
    AUTHORIZATION_REALMS: ${env:AUTHORIZATION_REALMS, ""}
    AUTHORIZATION_AUDIENCE: ${env:AUTHORIZATION_AUDIENCE, ""}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - ses:SendRawEmail
          Resource:
            - "arn:aws:ses:us-east-1:${aws:accountId}:identity/*"

        - Effect: Allow
          Action:
            - "dynamodb:DescribeTable"
            - "dynamodb:Scan"
            - "dynamodb:Query"
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
          Resource:
            - !GetAtt StdbTable.Arn
            - !Join ["/", [!GetAtt StdbTable.Arn, "index/*"]]
        
        - Effect: Allow
          Action:
            - "s3:ListBucket"
          Resource: !Join
            - ""
            - - "arn:aws:s3:::"
              - !Ref DataBucket
              - "/"

        - Effect: Allow
          Action:
            - "s3:HeadObject"
            - "s3:GetObject*"
            - "s3:DeleteObject"
          Resource: !Join
            - ""
            - - "arn:aws:s3:::"
              - !Ref DataBucket
              - "/*"


package:
  patterns:
    - "!./**"
    - "postbox/**"
    - "web_handler.py"
    - "ses_handler.py"



functions:
  api:
    # provisionedConcurrency: ${env:PROVISIONED_CONCURRENCY_API, '1'}
    handler: web.handler
    events:
      - httpApi:
          path: "/{proxy+}"
          method: "*"

  email:
    handler: ses_handler.handler
    # provisionedConcurrency: ${env:PROVISIONED_CONCURRENCY_SES, '1'}

  received:
    handler: ses_handler.sns_handler
    # provisionedConcurrency: ${env:PROVISIONED_CONCURRENCY_SES, '1'}
    events:
      - sns:
          arn: !Ref ReceiveMailTopic
          topicName: postbox-mail-received-${opt:stage}

plugins:
  - serverless-python-requirements
  - serverless-domain-manager

resources:
  - ${file("./resources/dynamodb-table.yaml")}
  - ${file("./resources/s3-bucket.yaml")}
  - ${file("./resources/sns-topic.yaml")}